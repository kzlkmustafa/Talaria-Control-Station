// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Talaria.Services;

#nullable disable

namespace Talaria.Migrations
{
    [DbContext(typeof(PortTestContextDb))]
    partial class PortTestContextDbModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Talaria.Models.SensorData", b =>
                {
                    b.Property<int>("MyDataId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MyDataId"), 1L, 1);

                    b.Property<string>("ErrorCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IoTData")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TeamNumber")
                        .HasColumnType("int");

                    b.Property<int>("altitudeDif")
                        .HasColumnType("int");

                    b.Property<float>("batteryVoltage")
                        .HasColumnType("real");

                    b.Property<int>("descentSpeed")
                        .HasColumnType("int");

                    b.Property<float>("gps1Latitude")
                        .HasColumnType("real");

                    b.Property<float>("gps1Longitude")
                        .HasColumnType("real");

                    b.Property<float>("gps1altitude")
                        .HasColumnType("real");

                    b.Property<int>("height1")
                        .HasColumnType("int");

                    b.Property<int>("height2")
                        .HasColumnType("int");

                    b.Property<int>("packageNumber")
                        .HasColumnType("int");

                    b.Property<float>("pitch")
                        .HasColumnType("real");

                    b.Property<float>("pressure1")
                        .HasColumnType("real");

                    b.Property<float>("pressure2")
                        .HasColumnType("real");

                    b.Property<string>("rhrh")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<float>("roll")
                        .HasColumnType("real");

                    b.Property<int>("satelliteStatus")
                        .HasColumnType("int");

                    b.Property<DateTime>("sendTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("tempature")
                        .HasColumnType("int");

                    b.Property<float>("yaw")
                        .HasColumnType("real");

                    b.HasKey("MyDataId");

                    b.ToTable("SensorDatas");
                });
#pragma warning restore 612, 618
        }
    }
}
